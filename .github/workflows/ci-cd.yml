name: CI/CD - Calculadora

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test:
    name: Build e Testes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restaurar dependências
        run: dotnet restore

      - name: Build do projeto
        run: dotnet build --configuration Release --no-restore

      - name: Test with Coverlet
        run: dotnet test CalculadoraTests/CalculadoraTests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura

      - name: Debug Coverage Files
        run: find . -name "coverage.xml"

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate HTML report
        run: |
          reportgenerator -reports:CalculadoraTests/coverage.xml -targetdir:coveragereport -reporttypes:Html

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReport
          path: coveragereport

      - name: Coverage and publish on summary
        run: |
          COVERAGE_FILE="CalculadoraTests/coverage.xml"
          if [[ ! -f "$COVERAGE_FILE" ]]; then
            echo "Arquivo de cobertura não encontrado!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          TOTAL_COVERAGE=$(grep -oP '(?<=line-rate=")[0-9.]+' "$COVERAGE_FILE" | head -n 1)
          TOTAL_COVERAGE_PERCENT=$(echo "$TOTAL_COVERAGE * 100" | bc)

          echo '### 📊 Relatório de Cobertura de Código' >> $GITHUB_STEP_SUMMARY
          echo "**Cobertura Total:** $TOTAL_COVERAGE_PERCENT% - Meta: ${{ secrets.COVERAGE_PERCENT }}%" >> $GITHUB_STEP_SUMMARY

          if (( $(echo "$TOTAL_COVERAGE_PERCENT < 80" | bc -l) )); then
            echo "A cobertura está abaixo da meta! Para mais informações, baixe o report." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  docker:
    name: Criar e enviar imagem Docker
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build da imagem Docker
        run: docker build -t gdmusse/calculadora:latest .

      - name: Enviar imagem para Docker Hub
        run: docker push gdmusse/calculadora:latest
